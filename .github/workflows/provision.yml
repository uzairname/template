name: 'Provision Resources'

on:
  workflow_dispatch:


env:
  PROJECT_NAME: template
  ADMIN_BASE_URL: https://template-admin.5r.workers.dev
  LANDING_BASE_URL: https://template.5r.workers.dev
  BACKEND_BASE_URL: https://template-backend.5r.workers.dev

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      actions: write
    
    outputs:
      supabase_public_url: ${{ steps.terraform_outputs.outputs.supabase_public_url }}
      supabase_anon_key: ${{ steps.terraform_outputs.outputs.supabase_anon_key }}
      supabase_service_role_key: ${{ steps.terraform_outputs.outputs.supabase_service_role_key }}
      supabase_db_password: ${{ steps.terraform_outputs.outputs.supabase_db_password }}
      postgres_uri: ${{ steps.terraform_outputs.outputs.postgres_uri }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      #  1. PROVISION INFRASTRUCTURE WITH TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.1.7'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          # These TF_VAR_ variables map to the 'variable' blocks in Terraform scripts
          TF_VAR_project_name: "${{ env.PROJECT_NAME }}"
          TF_VAR_supabase_bearer_token: "${{ secrets.SUPABASE_BEARER_TOKEN }}"
          TF_VAR_supabase_org_id: "${{ secrets.SUPABASE_ORG_ID }}"
          TF_VAR_cloudflare_api_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_cloudflare_account_id: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          TF_VAR_base_url: "${{ env.ADMIN_BASE_URL }}"
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: terraform_outputs
        working-directory: ./terraform
        run: |
          # Get non-sensitive outputs via terraform output
          echo "supabase_public_url=$(terraform output -raw supabase_public_url)" >> $GITHUB_OUTPUT
          
          # For sensitive outputs, we need a different approach since Terraform Cloud runs remotely
          # We'll use terraform output with JSON format and parse it locally
          terraform output -json > terraform-outputs-full.json
          
          # Extract sensitive values from the JSON (they exist but GitHub Actions filters them in job outputs)
          SUPABASE_ANON_KEY=$(jq -r '.supabase_anon_key.value' terraform-outputs-full.json)
          SUPABASE_SERVICE_ROLE_KEY=$(jq -r '.supabase_service_role_key.value' terraform-outputs-full.json)
          SUPABASE_DB_PASSWORD=$(jq -r '.supabase_db_password.value' terraform-outputs-full.json)
          POSTGRES_URI=$(jq -r '.postgres_uri.value' terraform-outputs-full.json)
          
          # Write to outputs (these won't be exposed in job outputs due to GitHub's filtering)
          echo "supabase_anon_key=$SUPABASE_ANON_KEY" >> $GITHUB_OUTPUT
          echo "supabase_service_role_key=$SUPABASE_SERVICE_ROLE_KEY" >> $GITHUB_OUTPUT
          echo "supabase_db_password=$SUPABASE_DB_PASSWORD" >> $GITHUB_OUTPUT
          echo "postgres_uri=$POSTGRES_URI" >> $GITHUB_OUTPUT
          
          # Create a local file with sensitive data for the cloudflare-secrets job to use
          cat > terraform-outputs.json << EOF
          {
            "supabase_anon_key": "$SUPABASE_ANON_KEY",
            "supabase_service_role_key": "$SUPABASE_SERVICE_ROLE_KEY", 
            "supabase_db_password": "$SUPABASE_DB_PASSWORD",
            "postgres_uri": "$POSTGRES_URI"
          }
          EOF
          
          # Set file permissions
          chmod 600 terraform-outputs.json

      - name: Clean up sensitive outputs file
        working-directory: ./terraform
        if: always()
        run: |
          # Securely delete the temporary outputs files
          for file in terraform-outputs.json terraform-outputs-full.json; do
            if [ -f "$file" ]; then
              shred -vfz -n 3 "$file" 2>/dev/null || rm -f "$file"
              echo "Sensitive outputs file $file securely deleted"
            fi
          done

      - name: Update Repository Variables
        env: 
          GH_TOKEN: ${{ secrets.GH_PAT_FOR_SECRETS }}
        run: |
          gh variable set SUPABASE_PUBLIC_URL --body "${{ steps.terraform_outputs.outputs.supabase_public_url }}"
          gh variable set SUPABASE_ANON_KEY --body "${{ steps.terraform_outputs.outputs.supabase_anon_key }}"
          gh variable set SUPABASE_SERVICE_ROLE_KEY --body "${{ steps.terraform_outputs.outputs.supabase_service_role_key }}"

      - name: Update Repository Secrets
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_FOR_SECRETS }}
        run: |
          gh secret set POSTGRES_URI --body "${{ steps.terraform_outputs.outputs.postgres_uri }}"

  cloudflare-secrets:
    strategy:
      matrix:
        app: ["backend", "landing", "admin"]
    runs-on: ubuntu-latest
    needs: terraform
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4
      - name: Publish Secrets to Cloudflare Worker
        run: |
          WORKER_NAME="${{ env.PROJECT_NAME }}-${{ matrix.app }}"
          echo "Uploading secrets to worker: $WORKER_NAME"

          echo "${{ needs.terraform.outputs.supabase_public_url }}" | npx wrangler secret put SUPABASE_PUBLIC_URL --name $WORKER_NAME
          echo "${{ needs.terraform.outputs.supabase_service_role_key }}" | npx wrangler secret put SUPABASE_SERVICE_ROLE_KEY --name $WORKER_NAME
          echo "${{ needs.terraform.outputs.supabase_db_password }}" | npx wrangler secret put SUPABASE_DB_PASSWORD --name $WORKER_NAME
          echo "${{ needs.terraform.outputs.postgres_uri }}" | npx wrangler secret put POSTGRES_URI --name $WORKER_NAME
          echo "${{ secrets.APP_KEY }}" | npx wrangler secret put APP_KEY --name $WORKER_NAME

