name: 'Provision Resources'

on:
  workflow_dispatch:


env:
  PROJECT_NAME: template
  ADMIN_BASE_URL: https://template-admin.5r.workers.dev
  LANDING_BASE_URL: https://template.5r.workers.dev
  BACKEND_BASE_URL: https://template-backend.5r.workers.dev

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      actions: write
    
    outputs:
      supabase_public_url: ${{ steps.terraform_outputs.outputs.supabase_public_url }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      #  1. PROVISION INFRASTRUCTURE WITH TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.1.7'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          # These TF_VAR_ variables map to the 'variable' blocks in Terraform scripts
          TF_VAR_project_name: "${{ env.PROJECT_NAME }}"
          TF_VAR_supabase_bearer_token: "${{ secrets.SUPABASE_BEARER_TOKEN }}"
          TF_VAR_supabase_org_id: "${{ secrets.SUPABASE_ORG_ID }}"
          TF_VAR_cloudflare_api_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_cloudflare_account_id: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          TF_VAR_base_url: "${{ env.ADMIN_BASE_URL }}"
        run: terraform apply -auto-approve

      - name: Get Non-Sensitive Terraform Outputs
        id: terraform_outputs
        working-directory: ./terraform
        run: |
          # Only capture non-sensitive outputs - sensitive ones are handled via TF Cloud variables
          echo "supabase_public_url=$(terraform output -raw supabase_public_url)" >> $GITHUB_OUTPUT

      - name: Update Repository Variables
        env: 
          GH_TOKEN: ${{ secrets.GH_PAT_FOR_SECRETS }}
        run: |
          gh variable set SUPABASE_PUBLIC_URL --body "${{ steps.terraform_outputs.outputs.supabase_public_url }}"
          # Note: Sensitive values (anon_key, service_role_key, postgres_uri) are set as 
          # environment variables in Terraform Cloud workspace and used directly in cloudflare-secrets job

  cloudflare-secrets:
    strategy:
      matrix:
        app: ["backend", "landing", "admin"]
    runs-on: ubuntu-latest
    needs: terraform
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.1.7'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}
          
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Upload Secrets to Cloudflare Worker
        working-directory: ./terraform
        env:
          # These TF_VAR_ variables map to the 'variable' blocks in Terraform scripts
          TF_VAR_project_name: "${{ env.PROJECT_NAME }}"
          TF_VAR_supabase_bearer_token: "${{ secrets.SUPABASE_BEARER_TOKEN }}"
          TF_VAR_supabase_org_id: "${{ secrets.SUPABASE_ORG_ID }}"
          TF_VAR_cloudflare_api_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_cloudflare_account_id: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          TF_VAR_base_url: "${{ env.ADMIN_BASE_URL }}"
          CLOUDFLARE_WORKER_NAME: "${{ env.PROJECT_NAME }}-${{ matrix.app }}"
        run: |
          WORKER_NAME="${{ env.PROJECT_NAME }}-${{ matrix.app }}"
          echo "Uploading secrets to worker: $WORKER_NAME"

          # Get values directly from terraform state using terraform console
          # This works even with Terraform Cloud because we're accessing the state directly
          SUPABASE_PUBLIC_URL=$(echo "module.supabase.public_url" | terraform console)
          SUPABASE_SERVICE_ROLE_KEY=$(echo "module.supabase.service_role_key" | terraform console)
          SUPABASE_DB_PASSWORD=$(echo "module.supabase.db_password" | terraform console)
          POSTGRES_URI=$(echo "module.supabase.postgres_uri" | terraform console)

          # Remove quotes from terraform console output
          SUPABASE_PUBLIC_URL=$(echo $SUPABASE_PUBLIC_URL | tr -d '"')
          SUPABASE_SERVICE_ROLE_KEY=$(echo $SUPABASE_SERVICE_ROLE_KEY | tr -d '"')
          SUPABASE_DB_PASSWORD=$(echo $SUPABASE_DB_PASSWORD | tr -d '"')
          POSTGRES_URI=$(echo $POSTGRES_URI | tr -d '"')

          # Upload to Cloudflare Worker
          echo "$SUPABASE_PUBLIC_URL" | npx wrangler secret put SUPABASE_PUBLIC_URL --name $WORKER_NAME
          echo "$SUPABASE_SERVICE_ROLE_KEY" | npx wrangler secret put SUPABASE_SERVICE_ROLE_KEY --name $WORKER_NAME
          echo "$SUPABASE_DB_PASSWORD" | npx wrangler secret put SUPABASE_DB_PASSWORD --name $WORKER_NAME
          echo "$POSTGRES_URI" | npx wrangler secret put POSTGRES_URI --name $WORKER_NAME
          echo "${{ secrets.APP_KEY }}" | npx wrangler secret put APP_KEY --name $WORKER_NAME

