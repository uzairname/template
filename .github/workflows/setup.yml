name: 'Setup Project'

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'The name for the project.'
        required: true
        default: 'project'
      environment:
        description: 'The environment to set up (e.g., dev, staging, prod).'
        required: true
        default: 'production'


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      #  1. PROVISION INFRASTRUCTURE WITH TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.1.7'
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_API_TOKEN: "${{ secrets.TFC_TOKEN }}"

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          # These TF_VAR_ variables map to the 'variable' blocks in your Terraform code
          TF_VAR_project_name: ${{ github.event.inputs.project_name }}
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_supabase_bearer_token: "${{ secrets.SUPABASE_BEARER_TOKEN }}"
          TF_VAR_supabase_org_id: "${{ secrets.SUPABASE_ORG_ID }}"
          TF_VAR_cloudflare_api_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_cloudflare_account_id: "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          TF_API_TOKEN: "${{ secrets.TFC_TOKEN }}"
        run: terraform apply -auto-approve

      #  2. EXTRACT TERRAFORM OUTPUTS
      
      - name: Get Terraform Outputs
        id: terraform_outputs
        working-directory: ./terraform
        run: |
          # Capture individual outputs as separate environment variables
          echo "supabase_url=$(terraform output -raw supabase_url)" >> $GITHUB_OUTPUT
          echo "supabase_anon_key=$(terraform output -raw supabase_anon_key)" >> $GITHUB_OUTPUT
          echo "supabase_service_role_key=$(terraform output -raw supabase_service_role_key)" >> $GITHUB_OUTPUT
          echo "supabase_db_password=$(terraform output -raw supabase_db_password)" >> $GITHUB_OUTPUT
        
      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Publish Secrets to Cloudflare Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          SUPABASE_URL: ${{ steps.terraform_outputs.outputs.supabase_url }}
          SUPABASE_ANON_KEY: ${{ steps.terraform_outputs.outputs.supabase_anon_key }}
          SUPABASE_SERVICE_KEY: ${{ steps.terraform_outputs.outputs.supabase_service_role_key }}
          SUPABASE_DB_PASSWORD: ${{ steps.terraform_outputs.outputs.supabase_db_password }}
        run: |
          WORKER_NAME="${{ github.event.inputs.project_name }}-api-${{ github.event.inputs.environment }}"
          echo "Uploading secrets to worker: $WORKER_NAME"
          
          echo "$SUPABASE_URL" | npx wrangler secret put SUPABASE_URL --name $WORKER_NAME
          echo "$SUPABASE_ANON_KEY" | npx wrangler secret put NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY --name $WORKER_NAME
          echo "$SUPABASE_SERVICE_KEY" | npx wrangler secret put SUPABASE_SECRET_KEY --name $WORKER_NAME
          echo "$SUPABASE_DB_PASSWORD" | npx wrangler secret put SUPABASE_DB_PASSWORD --name $WORKER_NAME

      - name: Deploy App to Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ steps.terraform_outputs.outputs.supabase_url }}
          NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${{ steps.terraform_outputs.outputs.supabase_anon_key }}
        run: |
          cd apps/api
          pnpm run deploy
